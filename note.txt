babel - es6+ 코드를 es5 이하 버전으로 트랜스 파일링 해준다.
구형 브라우저에서 지원하지 않는 코드를 IE나 구형 브라우저에서 동작하도록 만들기 위해서
ES6+코드를 ES5이하 버전으로 변환 해준다.

middleware - 처리가 끝날때까지 연결되어 있는것
express에서 모든 함수는 미들웨어가 될수 있다.
user와 end 사이에 원하는 만큼 넣을수 있다.

morgan - logger middleware
helmet - secure middleware
cookie-parser - 요청된 쿠키를 쉽게 추출할 수 있도록 해주는 미들웨어
cookie를 전달받아서 사용할수 있도록 만들어주는 미들웨어,
사용자 인증 같은 곳에서 쿠키를  검사할때 사용
body-parser - 클라이언트 POST requset data의 body로부터 파리미터를 편리하게 추출해준다.
사용자가 웹사이트로 전달하는 정보들을 검사하는 미들웨어,
requsest 정보에서 form이나 json 형태로 된 body 를 검사한다.

export default app;
import app from "./app.js";
export default는 파일로 export 한다는거다.

export const userRouter = express.RouteR(); 는 오직 이 변수만 export 한다는 거다.
import { userRouter } from "./router.js";

app.use("/user", userRouter);
app.use에서 use는 이 router전체를 사용하겠다는 의미다.

MVC
M - data
V - how does the data look
C - function that looks for the data

arrow function

function lalala () {
    return true
}

lalala = () => true

lalala = () => {
    return true
}

대괄호가 없으면 암시적으로 return해주지만,
대괄호를 넣어주면 return 하지 않는다.


pug 사용법 - https://dydals5678.tistory.com/91
pug에서 텍스트 사이에 자바스크립트를 추가해주고 싶다면
#{}사이에 넣어주면 된다.

layout을 통하여 반복되는 부분을 최소화 할수 있다.
block content를 통하여 원하는 부분만 변화게 할수있다.

extends layouts/main

block content
    p join

partials를 통하여 다룬파일을 이 pug에 가져올수 있다
include는 그냥 있는 그대로 껴넣음
block는 상속 비슷한것을 받아야 하지만 partials는 그대로 가능

locals에 있는 것은 템플릿에 변수명 처럼 존재한다.
locals에 로컬 변수를 저장하면 이 변수들을 템플릿에서 사용할 수 있다.
전역적으로(글로벌) 사용할 수 있는 변수를 추가 하는 방법
모든 템플릿에서 사용가능(템플릿, 뷰, 모든곳에서 사용 가능)
코드 사이에 들어있어서 next()를 호출 해야한다.(다음함수(미들웨어)로 넘겨주기 위해서)

전역범위에 변수를 추가하는 것이 아닌 한 템플릿에만 추가
render함수의 첫번째 인자는 템플릿
두번쨰 인자는 템플릿에 추가할 정보가 담긴 객체
export const home = (req, res) => res.render("home", { pageTitle: "Home" });
전달하고 싶은것은 무엇이든지 전달 가능하다.
export const home = (req, res) => res.render("home", { pageTitle: "Home",  potato: 1234 });

form추가
action은 /search인데 routes.search로 적어줘도 됨
method는 get으로(이래야 url에 정보가 표시됨 post면 안보임)
input에 name을 추가해줘야 url에 정보가 표시됨

es6 이전
const searchingBy = req.query.term;
es6 - 둘은 동일하다
const { query: { term } } = req;
term에 변수명을 할당하고싶으면 아래와 같이 해주면 된다.
const {
  query: { term: searchingBy }
} = req;

res.render("search", { pageTitle: "Search", searchingBy });

get요청을 보냈을때 해당하는 컨트롤러만 있을때 mtehod="post"를 해주면 에러가 난다.

User Detail라고 뜬 이유는 /edit-profile을 /:id 로 인식해서 그렇다.
userRouter에 가서 순서를 바꿔주면 된다.(editProfile, changePassword가 더 위에 오도록)

express는 /:id/edit을 이해할수 있지만 링크는 /videos/:id/delete로 그대로 표시됨
id의 값이 변해야 하는데 변하지 않는다 이를 해결해야함

homeController에서 videos 배열 전달하기
import { videos } from "../db";
export const home = (req, res) => {
  res.render("home", { pageTitle: "Home", videos });
};

videos배열에서 하나씩 template를 적용시킴
each video in videos
    h1= video.title
    p= item.discription

mixin
mixin은 웹사이에트에서 자주 반복되는 코드를 담고있다.

each item in videos
    +videoBlock({
        title: item.title,
        description: item.description
    })
이 정보들이 videoBlock으로 전달되어서 
mixin videoBlock(video = {})
    h1=video.title
    p=video.description
이 함수를 실행시킨다.
그리고 그 함수는 html로 내보낸다.

각각 다른 정보를 가지지만 같은 구조를 가지는 데이터를 표시하기 위한 코드를 캡슐화 했다.
이게 mixin을 사용하는 이유다. 다른정보, 같은구조
mixin videoBlock(video = {})
    .videoBlock
        video.videoBlock__thumbnail(src=video.videoFile, controls=true)
        h4.videoBlock__title=video.title
        h6.videoBlock__views=video.views

block content
    .videos
        each item in videos
            +videoBlock({
                title: item.title,
                views: item.views,
                videoFile: item.videoFile
            })